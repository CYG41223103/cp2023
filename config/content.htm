<h1>About</h1>
<p>倉儲:<a href="https://github.com/CYG41223103/cp2023">https://github.com/CYG41223103/cp2023</a></p>
<p>網站:<a href="https://cyg41223103.github.io/cp2023/content/index.html">https://cyg41223103.github.io/cp2023/content/index.html</a></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<h1>作業內容</h1>
<h2>W3</h2>
<p>利用已經帶有 Brython 執行環境的倉儲, 在設定學員 Github Classroom 首次作業時, 即經由 template 置入, 因此學員只要:</p>
<p>利用學校 email 帳號, 建立 Github 帳號, 以英文姓名縮寫加上一組數字, 選擇最短帳號名稱 例如: jfk40723199, jfk 為其自選的姓名縮寫, 而隨後則加上各自的學號.</p>
<p>擁有 Github 帳號後, 即可透過 Github Classroom assignment 連結取得作業倉儲, 自行在倉儲中設定 Github Pages 後, 即可啟用作業網站 (以下<span> </span><span>所謂<span>網站均指靜態網站</span><span> </span></span>, 而用來編輯網站內容的<span>動態網站, 則統稱為網際內容編輯器</span>, 使用動態網站的目的在編輯靜態網站的內容). 網站內容經過編輯之後, 必須建立新的網站內容 (使用 generate_pages), 然後將新的網站內容更新到對應的 Github 倉儲中 (稱為改版, 其過程經歷 git add, git commit 與 git push 等階段).</p>
<p>git 為分散式版次管理系統工具.</p>
<p>git add</p>
<p>git commit</p>
<p>git push</p>
<p>採用 Github Classroom 建立作業倉儲的問題:</p>
<p>2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限)<span> </span><span>逐一進行設定</span>.</p>
<p><img alt="" height="310" src="https://mde.tw/cpnote/images/mdecp2023_replit_requests.png" width="400"/></p>
<p>(上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit,<span> </span><span>每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests</span>)</p>
<p>為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責</p>
<h2>W4</h2>
<p><span>各學員自行建立線上考試帳號</span></p>
<p><span>依據<span> </span><a href="https://qry.nfu.edu.tw/teacher.php?selyr=1121&amp;teacher=%E5%9A%B4%E5%AE%B6%E9%8A%98">112 學年度第一學期教師授課表</a>中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號.</span></p>
<p><span>各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages</span></p>
<p>登入 Github 後, 以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 Template 建立 cp2023 倉儲</p>
<p><span>在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github</span></p>
<p>在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號</p>
<p>利用 import 將 cp2023 倉儲導入 Replit</p>
<p>設定 .replit 為 python3 main.py</p>
<p>根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install</p>
<p>以 Run 執行 main.py 啟動倉儲內容編輯網頁</p>
<p>利用<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">密碼產生程式</a>將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證)</p>
<p>重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github</p>
<h2>w5</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p></p>
<p><img caption="false" height="212" src="/images/gnuplot_ex1.png" width="424"/></p>
<h2>w6</h2>
<h3>台灣國旗</h3>
<p><img alt="" height="267" src="/images/taiwan_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<h3>日本國旗</h3>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_red_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int originalWidth = 1200;
    int originalHeight = (int)(originalWidth * 2.0 / 3.0);
    gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    // 新的宽度和高度以适应 "images" 文件夹
    int newWidth = 600;
    int newHeight = (int)(newWidth * 2.0 / 3.0);

    // 创建新图像并进行缩放
    gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight);
    gdImageAlphaBlending(resizedImage, 0);
    gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight);

  FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePng(resizedImage, outputFile);
    fclose(outputFile);
    gdImageDestroy(img);
    gdImageDestroy(resizedImage);

    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    // 创建一个白色背景
    int white = gdImageColorAllocate(img, 255, 255, 255);
    gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white);

    // 绘制红色圆圈（太阳）
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int center_x = width / 2;
    int center_y = height / 2;
    int radius = (int)((width * 2) / 3);
    draw_red_sun(img, center_x, center_y, radius, red);
}

void draw_red_sun(gdImagePtr img, int x, int y, int size, int color) {
  // 減小 size 的值,例如將他的值減半
  size = size / 2;
    gdImageArc(img, x, y, size, size, 0, 360, color);
    gdImageFillToBorder(img, x, y, color, color);
}</pre>
<h3>美國國旗</h3>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.126 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.122 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;
        int space_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;
        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x+space_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10+M_PI;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2">
<h2>W7</h2>
<p>Map: site map 網站所有頁面</p>
<p>EditA: edit all pages, 使用時機為(1)解決多人共用網站時的衝突, 或(2)刪除特定頁面</p>
<p>Edit: edit one page, 先選頁面, 再選 Edit 然後才能進入編輯模式</p>
<p>Config: 編輯網站標題, 若要編輯 site title, 必須更改 init.py 中的 site_title 字串內容</p>
<p>Search: 頁面資料 html 原始碼內容搜尋</p>
<p>IUpload: image upload, 影像檔案上傳, 資料會放入 images 目錄中</p>
<p>IList: image file list, 列出存在 images 目錄下的影像檔案</p>
<p>FUpload: file upload, 一般檔案上傳功能, 資料會放入 downloads 目錄中</p>
<p>FList: file list, 列出位於 downloads 目錄下的檔案</p>
<p>Logout: 登出</p>
<p>Convert: 將 config/content.htm 經過分頁程式處理後, 轉為 content 目錄下的超文件</p>
<h2>W10</h2>
<p>線上簡報、網誌與多媒體影片製作工具:</p>
<p><a href="https://leo-editor.github.io/leo-editor/">Leo Editor</a><span> </span>(<a href="https://groups.google.com/g/leo-editor">討論群組</a>) 為大綱管理系統, 可以當作程式開發的 IDE (Integrated Development Environment) 使用, 可用來編輯 reveal.js 簡報檔案中的 html 與 markdown, 也可用來編輯 Pelican 網誌 markdown 與轉檔, 並且在電腦輔助設計與分析過程中, 可以用來解讀 CoppeliaSim XML 格式檔案.</p>
<p>因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0: <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EYf6RiAqXAFJllAizi_-iZ4BT9ZEn8-bT2V8TVjd9p446Q?e=NSCciC">Python312_leo_664_PyQt5.7z</a><span> </span>(需要下載密碼)</p>
<p><a href="https://www.debugmode.com/wink.html">Wink</a><span> </span>為操作流程影片製作套件, 可以在電腦操作過程, 儲存關鍵頁面與滑鼠點擊區域後, 加上輔助文字說明後製作成 mp4 影片檔.</p>
<p><a href="https://github.com/ShareX/ShareX/releases">ShareX</a><span> </span>為螢幕畫面取像或錄影套件, 可以擷取電腦畫面任一區域存為影像檔, 或者結合語音說明與滑鼠操作錄製說明影片.</p>
<p><a href="https://github.com/obsproject/obs-studio/releases">OBS</a><span> </span>為電腦廣播製作系統, 可以結合各種語音、圖像與影片製作出多元的電腦操作說明影片.</p>
<p>Wink 與 ShareX 都需要<span> </span><a href="https://ffmpeg.org/download.html#build-windows">ffmpeq.exe</a>.</p>
<h2>W13</h2>
<p>在這學期的計算機概論中，我學習到了許多平時不太會接觸到的技能。比如，在GitHub上建立網路倉儲，以及在Replit網站平台上使用C++進行繪圖。整體而言，這些技能讓我覺得挺有趣的。</p>
<p>然而，在遇到一些問題時，真的讓人感到十分無奈。即使有GPT這樣的工具，有時候也無法完全解決我遇到的問題(應該是理解上的問題啦)。還有學校的網路問題真的体讓人困擾的。</p>
<h1>ANSIC</h1>
<h2>c1.</h2>
<p><span>編寫一個 C 程式來列印您的姓名、出生日期和手機號碼。</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()  
{
    // Print Name
    printf("Name   : Chiu\n"); 

    // Print Date of Birth
    printf("DOB    : September 14, 2004\n"); 

    // Print Mobile Number
    printf("Mobile : 0900-000-000\n"); 

    // Indicate successful execution
    return(0); 
}</pre>
</div>
<!-- editor2 結束 -->
<p><img alt="" src="https://discord.com/channels/@me/1171354666978771047/1194092421265506375" width="200"/><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194092421064175716/image.png?ex=65af183a&amp;is=659ca33a&amp;hm=c1514f7a343899793cc04c99fec1545167821bf8f97d587f6f8ae056e908dd09&amp;"/></p>
<h2>c2.</h2>
<h4>檢查給定的數字是否為醜數</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"># include &lt;stdio.h&gt;
# include &lt;string.h&gt;

int main()
{
int n,x=0;
  printf("\n\n Check whether a given number is an ugly number:\n");
  printf("----------------------------------------------------\n");
  printf("Input an integer number: ");
  scanf("%d",&amp;n);

      if (n &lt;= 0) {  
            printf("Input a correct number.");  
        }
       while (n != 1) 
       {  
            if (n % 5 == 0) 
            {  
                n /= 5;  
            } 
            else if (n % 3 == 0) 
            {  
                n /= 3;  
            } 
            else if (n % 2 == 0) 
            {  
                n /= 2;  
            } 
            else
            {  
                printf("It is not an ugly number.\n"); 
                x = 1;  
                break;  
            }  
        } 
                if (x==0)
                { 
                printf("It is an ugly number.\n");
                }
}</pre>
<p><img height="228" src="https://cdn.discordapp.com/attachments/1171354666978771047/1194094245116661831/image.png?ex=65af19ed&amp;is=659ca4ed&amp;hm=b1a91c223e88dd95c5bfa8944b8fcbbf620aac1e386200a5ea132458d03feaec&amp;" width="453"/></p>
<h2>c3.</h2>
<h4>反轉給定整數的數字</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int reverse(int n) {
    int d, y = 0;
    while (n) {
        d = n % 10;
        if ((n &gt; 0 &amp;&amp; y &gt; (0x7fffffff - d) / 10) ||
            (n &lt; 0 &amp;&amp; y &lt; ((signed)0x80000000 - d) / 10)) {
            return 0;  
        }
        y = y * 10 + d;
        n = n / 10;
    }
    return y;  
}

int main(void)
{
    int i = 123;
    printf("Original integer: %d  ",i);
    printf("\nReverse integer: %d  ",reverse(i));
    i = 208478933;
    printf("\nOriginal integer: %d  ",i);
    printf("\nReverse integer: %d  ",reverse(i));
    i = -73634;
    printf("\nOriginal integer: %d  ",i);
    printf("\nReverse integer: %d  ",reverse(i));
    return 0;
}
</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194095351553069156/image.png?ex=65af1af5&amp;is=659ca5f5&amp;hm=367cb7f236e3d3aeba643b8c359e3ba016b4f3e828f2e8964767dcdc6632b473&amp;"/></p>
<h2>c4.</h2>
<p><span>使用哈希 (#) 列印一個區塊 F，其中 F 的高度為 6 個字符，寬度為 5 個和 4 個字符。</span><span>並且還列印一個非常大的“C”。</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() 
{
    // Print top line of pattern
    printf("    ######\n");

    // Print second line of pattern
    printf("  ##      ##\n");

    // Print lines 3 to 7 of pattern
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");

    // Print bottom line of pattern
    printf("  ##      ##\n");

    // Print last line of pattern
    printf("    ######\n");

    return(0);
}</pre>
<p><span><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194095856719237172/image.png?ex=65af1b6d&amp;is=659ca66d&amp;hm=fab61b332935b4b17f0e01936a2ec64c0656c3e32fdcf00ef8992e8179b6b062&amp;"/></span></p>
<h2>c5.</h2>
<h4>從隨機數組和排序數組構造最大堆</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">  #include &lt;stdio.h&gt;          // 包含 printf 函數的標準輸入/輸出庫
  #include &lt;stdlib.h&gt;         // 包含動態記憶體分配的標準庫

  #define MAX_HEAP_SIZE 100   // 定義堆的最大大小

  // 交換堆中兩個元素的函數
  void swap(int *a, int *b) {
      int temp = *a;
      *a = *b;
      *b = temp;
  }

  // 插入元素後維護最大堆屬性的函數
  void heapifyDown(int arr[], int size, int index) {
      int leftChild = 2 * index + 1;   // 計算左子索引
      int rightChild = 2 * index + 2;  // 計算右子索引
      int largest = index;              // 假設當前節點是最大的

      // 求當前節點、左子節點、右子節點中最大的元素
      if (leftChild &lt; size &amp;&amp; arr[leftChild] &gt; arr[largest]) {
          largest = leftChild;
      }

      if (rightChild &lt; size &amp;&amp; arr[rightChild] &gt; arr[largest]) {
          largest = rightChild;
      }

      // 如果最大的元素不是當前節點，則與最大的子節點交換並繼續向下堆
      if (largest != index) {
          swap(&amp;arr[index], &amp;arr[largest]);
          heapifyDown(arr, size, largest);
      }
  }

  // 從數組建立最大堆的函數
  void buildMaxHeap(int arr[], int size) {
      // 從最後一個非葉節點開始，向下堆化到根
      for (int i = size / 2 - 1; i &gt;= 0; i--) {
          heapifyDown(arr, size, i);
      }
  }

  // 顯示數組元素的函數
  void display(int arr[], int size) {
      printf("Array elements: ");
      for (int i = 0; i &lt; size; i++) {
          printf("%d ", arr[i]);  // 列印數組中的每個元素
      }
      printf("\n");
  }

  int main() {
      // 使用隨機數組進行測試
      int randomArray[] = {6, 8, 12, 7, 1};               // 聲明一個隨機數組
      int randomSize = sizeof(randomArray) / sizeof(randomArray[0]);  // 計算數組的大小

      printf("Original Random Array:\n");
      display(randomArray, randomSize);  // 顯示原始隨機數組

      // 從隨機數組建立最大堆
      buildMaxHeap(randomArray, randomSize);

      printf("Max Heap from Random Array:\n");
      display(randomArray, randomSize);  // 顯示隨機數組中的最大堆

      // 使用排序數組進行測試
      int sortedArray[] = {19, 12, 8, 6, 2};              // 聲明一個排序數組
      int sortedSize = sizeof(sortedArray) / sizeof(sortedArray[0]);  // 計算數組的大小

      printf("\nOriginal Sorted Array:\n");
      display(sortedArray, sortedSize);  // 顯示原始排序數組

      // 從排序數組建立最大堆
      buildMaxHeap(sortedArray, sortedSize);

      printf("Max Heap from Sorted Array:\n");
      display(sortedArray, sortedSize);  // 顯示排序數組中的最大堆

      return 0;                         // 返回0表示執行成功
  }</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194096453182824598/image.png?ex=65af1bfb&amp;is=659ca6fb&amp;hm=2bb407da7a03e72e67298f5c52257e6bf323e788dc3b488af0a6565b49927cdf&amp;"/></p>
<h2>c6.</h2>
<h4>從隨機數組和排序數組構造最小堆</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// 用於堆化以節點 i 為根的子樹的函數，該節點是 arr[] 中的索引
void minHeapify(int arr[], int n, int i) {
    int smallest = i;  // 將最小的初始化為 root
    int left = 2 * i + 1;  // 左子節點
    int right = 2 * i + 2; // 右子節點

    // 如果左子節點小於根
    if (left &lt; n &amp;&amp; arr[left] &lt; arr[smallest])
        smallest = left;

    // 如果右子節點小於目前為止最小的子節點
    if (right &lt; n &amp;&amp; arr[right] &lt; arr[smallest])
        smallest = right;

    // 如果最小的不是根
    if (smallest != i) {
        // 將找到的最小元素與根交換
        int temp = arr[i];
        arr[i] = arr[smallest];
        arr[smallest] = temp;

        // 遞歸地堆化受影響的子樹
        minHeapify(arr, n, smallest);
    }
}

// 從數組建立最小堆的函數
void buildMinHeap(int arr[], int n) {
    // 從最後一個非葉子節點開始，以相反的順序堆疊所有節點
    for (int i = n / 2 - 1; i &gt;= 0; i--)
        minHeapify(arr, n, i);
}

// 列印數組的函數
void printArray(int arr[], int n) {
    for (int i = 0; i &lt; n; ++i)
        printf("%d ", arr[i]);
    printf("\n");
}

// 測試堆構造函數
int main() {
    // 使用隨機數組進行測試
    int randomArray[] = {4, 10, 3, 5, 1};
    int n1 = sizeof(randomArray) / sizeof(randomArray[0]);

    printf("Original Random Array: ");
    printArray(randomArray, n1);

    // 建構堆
    buildMinHeap(randomArray, n1);

    printf("Min Heap from Random Array: ");
    printArray(randomArray, n1);

    printf("\n");

    // 使用排序數組進行測試
    int sortedArray[] = {8, 7, 5, 4, 2};
    int n2 = sizeof(sortedArray) / sizeof(sortedArray[0]);

    printf("Original Sorted Array: ");
    printArray(sortedArray, n2);

    // 建構堆
    buildMinHeap(sortedArray, n2);

    printf("Min Heap from Sorted Array: ");
    printArray(sortedArray, n2);

    return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194096878007091282/image.png?ex=65af1c60&amp;is=659ca760&amp;hm=772260ff05b3f8d107cf06e4cd5394625fcf4e4437e1ab06aa4f863909b5b4ec&amp;"/></p>
<h2>c7.</h2>
<h4>鏡像的二元樹鏡像</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包括必要的頭文件
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
// 二元樹節點的結構
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};
 
// 建立新節點的函數
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode != NULL) {
        newNode-&gt;data = value;
        newNode-&gt;left = NULL;
        newNode-&gt;right = NULL;
    }
    return newNode;
}
 
// 向二元樹插入節點的函數
struct TreeNode* insertNode(struct TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
 
    if (value &lt; root-&gt;data) {
        root-&gt;left = insertNode(root-&gt;left, value);
    } else if (value &gt; root-&gt;data) {
        root-&gt;right = insertNode(root-&gt;right, value);
    }
 
    return root;
}
 
// 執行有序遍歷和列印元素的函數
void inOrderTraversal(struct TreeNode* root) {
    if (root != NULL) {
        inOrderTraversal(root-&gt;left);
        printf("%d ", root-&gt;data);
        inOrderTraversal(root-&gt;right);
    }
}
 
// 建立二元樹鏡像的函數
struct TreeNode* mirrorTree(struct TreeNode* root) {
    if (root == NULL) {
        return NULL;
    }
 
    // 交換左右子樹
    struct TreeNode* temp = root-&gt;left;
    root-&gt;left = mirrorTree(root-&gt;right);
    root-&gt;right = mirrorTree(temp);
 
    return root;
}
 
// 釋放為二元樹分配的記憶體的函數
void freeTree(struct TreeNode* root) {
    if (root != NULL) {
        freeTree(root-&gt;left);
        freeTree(root-&gt;right);
        free(root);
    }
}
 
int main() {
    struct TreeNode* root = NULL;
    int nodeValue;
    char choice;
 
    // 將節點插入二元樹
    do {
        printf("Input a value to insert into the binary tree (enter 0 to stop): ");
        scanf("%d", &amp;nodeValue);
 
        if (nodeValue != 0) {
            root = insertNode(root, nodeValue);
        }
 
    } while (nodeValue != 0);
 
    //列印原始二元樹
    printf("\nOriginal Binary Tree (In-order Traversal): ");
    inOrderTraversal(root);
    printf("\n");
 
    // 建立並列印二元樹的鏡像
    struct TreeNode* mirroredRoot = mirrorTree(root);
    printf("\nMirrored Binary Tree (In-order Traversal): ");
    inOrderTraversal(mirroredRoot);
    printf("\n");
 
    // 釋放分配的記憶體
    freeTree(root);
    freeTree(mirroredRoot);
 
    return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194097866810081280/image.png?ex=65af1d4c&amp;is=659ca84c&amp;hm=c70f1f498fe97a652156722b53938225be48834df131248845d7813b7d4878d1&amp;"/></p>
<h2>c8.</h2>
<h4>找出兩個數字之間的最大數字</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
int main() {
    int fno, sno, *ptr1 = &amp;fno, *ptr2 = &amp;sno;
 
    printf("\n\n Pointer : Find the maximum number between two numbers :\n");
    printf("------------------------------------------------------------\n");
 
    printf(" Input the first number : ");
    scanf("%d", ptr1); // 讀取使用者的第一個數字並使用 ptr1 儲存它
    printf(" Input the second number : ");
    scanf("%d", ptr2); // 從用戶那裡讀取第二個數字並使用 ptr2 儲存它
 
    // 比較ptr1和ptr2指向的值，找出最大數
    if (*ptr1 &gt; *ptr2) {
        printf("\n\n %d is the maximum number.\n\n", *ptr1); // 列印最大數量
    } else {
        printf("\n\n %d is the maximum number.\n\n", *ptr2); //列印最大數量
    }
    return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194098947317301258/image.png?ex=65af1e4e&amp;is=659ca94e&amp;hm=3456d43d79f07fc0f655c5ef14fe30290f6b77e7f577c0940e2a44c5bf94ae55&amp;"/></p>
<h2>c9.</h2>
<p><span>寫一個C 程式來顯示多個變數。</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 125, b = 12345;        /* Declare and initialize integer variables */
    long ax = 1234567890;          /* Declare and initialize long integer variable */
    short s = 4043;                /* Declare and initialize short integer variable */
    float x = 2.13459;             /* Declare and initialize floating-point variable */
    double dx = 1.1415927;         /* Declare and initialize double precision variable */
    char c = 'W';                  /* Declare and initialize character variable */
    unsigned long ux = 2541567890; /* Declare and initialize unsigned long integer variable */

    /* Various arithmetic operations and type conversions */
    printf("a + c =  %d\n", a + c);
    printf("x + c = %f\n", x + c);
    printf("dx + x = %f\n", dx + x);
    printf("((int) dx) + ax =  %ld\n", ((int) dx) + ax);
    printf("a + x = %f\n", a + x);
    printf("s + b =  %d\n", s + b);
    printf("ax + b = %ld\n", ax + b);
    printf("s + c =  %hd\n", s + c);
    printf("ax + c = %ld\n", ax + c);
    printf("ax + ux = %lu\n", ax + ux);

    return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194099500239827034/image.png?ex=65af1ed2&amp;is=659ca9d2&amp;hm=b4125b35f32a2cc127687edf59b581bf3d0b2d71e1ec42b3d5ce0ffe6d8c798a&amp;"/></p>
<h2>c10.</h2>
<p><span>寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的和。</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int x, y;
    int result1, result2; // 用于存储 scanf 的返回值

    // 获取第一个整数
    printf("Input the first integer: ");
    result1 = scanf("%d", &amp;x);
    if (result1 != 1) {
        printf("Error: Please enter an integer.\n");
        return 1;
    }

    // 获取第二个整数
    printf("Input the second integer: ");
    result2 = scanf("%d", &amp;y);
    if (result2 != 1) {
        printf("Error: Please enter an integer.\n");
        return 1;
    }

    // 计算并输出它们的和
    printf("Sum of the two integers = %d\n", x + y);

    return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194100107000434698/image.png?ex=65af1f62&amp;is=659caa62&amp;hm=d0dc0ff60e3d0d934c2cc3ac521d4c5e8b57ee69ade13a76eae44e4e32ae286c&amp;"/></p>
<h1>C_EX</h1>
<h2>ex1.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
/* 印出 Hello World! Bye Bye */
printf("Hello World! ");
printf("Bye ");
printf("Bye");
return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194104770298904616/image.png?ex=65af23ba&amp;is=659caeba&amp;hm=2fbd3ccc1f0a893911ad0318cc8e4a6e91db3ac8d35bd3db1f51b50cb258bc95&amp;"/></p>
<h2>ex2.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
/* read and display a number */
int main () {
 char c;
 printf("Enter character: ");
 c = getchar(); /* read the character in */
 printf("Character entered: ");
 putchar(c); /* write the character */
 return(0);
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194105742710554736/image.png?ex=65af24a2&amp;is=659cafa2&amp;hm=30234705785a64863e690b032909e76517c6d14e01b4bc1a5435c6d8921b8642&amp;"/></p>
<h2>ex3.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
printf("%d\n", 1 &amp;&amp; 3 );
printf("%d\n", 0 &amp;&amp; 0 );
printf("%d\n", 2 &amp;&amp; 2 );
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194106251953590332/image.png?ex=65af251b&amp;is=659cb01b&amp;hm=1642f5b9dd650f9db4c2404beaba491e4e43b94697b1da1c0190a1586dd6e338&amp;"/></p>
<h2>ex4.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
void main()
{
int a,b;
a = 15;
b = 1;
printf("%d \n", a | b ); /* a OR b */
printf("%d \n", a &amp; b ); /* a AND b */
printf("%d \n", a ^ b ); /* a XOR b */
printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
printf("%d \n", ~a ); /* A 的補數運算 */
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194106476646637619/image.png?ex=65af2551&amp;is=659cb051&amp;hm=13890c45f6009b656c6064526a8fdfde7dfcd0a9e0c370243b5859d217e06631&amp;"/></p>
<h2>ex5.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194106775033622558/image.png?ex=65af2598&amp;is=659cb098&amp;hm=687203801b204ef5b30ad2cf7562c32078cca14ac9be0af7cd7d033f84bbf562&amp;"/></p>
<h2>ex6.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194107018072576000/image.png?ex=65af25d2&amp;is=659cb0d2&amp;hm=c4d09c6786bb4d2a5f80c8b2fb2173d52479e09cac6a3408bea0932973db9472&amp;"/></p>
<h2>ex7.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
char x, y;
x = 'a';
y = (char)97;
/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
printf( " x = %c, y = %c, ASCII of y = %d", x, y, y );
return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194107321647911073/image.png?ex=65af261a&amp;is=659cb11a&amp;hm=36d2d613ff006a86d5de0a7891e766bfa7ba8030e701902df7e59334d4c9981c&amp;"/></p>
<h2>ex8.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194107678390235156/image.png?ex=65af266f&amp;is=659cb16f&amp;hm=6c13e8e4c8b7f4ee5078c5f1208ae720b12123b39ca13adbef30e98907c0ce33&amp;"/></p>
<h2>ex9.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
int a;
a = 9;
printf("%d\n", !a );
a = 0;
printf("%d\n", !a );
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194107979591594074/image.png?ex=65af26b7&amp;is=659cb1b7&amp;hm=f11fde66aa2bf0f68e289a15c9641e0c1309c6b5f08ef87f7520ea7454b907ed&amp;"/></p>
<h2>ex10.</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
float circle( int r ); /* 宣告 circle 的 prototype */
void main()
{
float answer;
answer = circle(8);
printf( " 圓周長度是 %f", answer );
}
/* ====================
 circle 函數, 計算 circle 的圓周長
==================== */
float circle( int r )
{
float result;
result = 3.14159 * (double)2 * r;
return ( result );
}</pre>
<p><img src="https://cdn.discordapp.com/attachments/1171354666978771047/1194108890221125723/image.png?ex=65af2790&amp;is=659cb290&amp;hm=dfa3fba3d4185945f91d979cdbad9d60fc5b8ccd857e6d73ae3e0ba3ea2bda85&amp;"/></p>
<p></p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>